//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
  private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
      this.http = http ? http : window as any;
      this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
  }

  /**
   * @return Success
   */
  getAll(): Promise<CategoryViewModel[]> {
      let url_ = this.baseUrl + "/api/Category/GetAll";
      url_ = url_.replace(/[?&]$/, "");

      let options_: RequestInit = {
          method: "GET",
          headers: {
              "Accept": "text/plain"
          }
      };

      return this.http.fetch(url_, options_).then((_response: Response) => {
          return this.processGetAll(_response);
      });
  }

  protected processGetAll(response: Response): Promise<CategoryViewModel[]> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
      if (status === 200) {
          return response.text().then((_responseText) => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          if (Array.isArray(resultData200)) {
              result200 = [] as any;
              for (let item of resultData200)
                  result200!.push(CategoryViewModel.fromJS(item));
          }
          else {
              result200 = <any>null;
          }
          return result200;
          });
      } else if (status === 404) {
          return response.text().then((_responseText) => {
          let result404: any = null;
          let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
              result404 = resultData404 !== undefined ? resultData404 : <any>null;

          return throwException("Not Found", status, _responseText, _headers, result404);
          });
      } else {
          return response.text().then((_responseText) => {
          let resultdefault: any = null;
          let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          resultdefault = ProblemDetails.fromJS(resultDatadefault);
          return throwException("Error", status, _responseText, _headers, resultdefault);
          });
      }
  }

  /**
   * @param id (optional)
   * @param name (optional)
   * @param url (optional)
   * @param imageUrl (optional)
   * @param iconUrl (optional)
   * @param imageData (optional)
   * @return Success
   */
  post(id: number | undefined, name: string | undefined, url: string | undefined, imageUrl: string | undefined, iconUrl: string | undefined, imageData: any): Promise<CategoryViewModel> {
      let url_ = this.baseUrl + "/api/Category/Post";
      url_ = url_.replace(/[?&]$/, "");

      const content_ = new FormData();
      if (id === null || id === undefined)
          throw new Error("The parameter 'id' cannot be null.");
      else
          content_.append("Id", id.toString());
      if (name === null || name === undefined)
          throw new Error("The parameter 'name' cannot be null.");
      else
          content_.append("Name", name.toString());
      if (url === null || url === undefined)
          throw new Error("The parameter 'url' cannot be null.");
      else
          content_.append("Url", url.toString());
      if (imageUrl === null || imageUrl === undefined)
          throw new Error("The parameter 'imageUrl' cannot be null.");
      else
          content_.append("ImageUrl", imageUrl.toString());
      if (iconUrl === null || iconUrl === undefined)
          throw new Error("The parameter 'iconUrl' cannot be null.");
      else
          content_.append("IconUrl", iconUrl.toString());
      if (imageData === null || imageData === undefined)
          throw new Error("The parameter 'imageData' cannot be null.");
      else
          content_.append("ImageData", imageData);

      console.log(id);
      console.log(name);
      console.log(url);
      console.log(imageUrl);
      console.log(iconUrl);
      console.log(imageData.data);
      console.log(imageData.fileName);

      let options_: RequestInit = {
          body: content_,
          method: "POST",
          headers: {
              "Accept": "text/plain"
          }
      };

      return this.http.fetch(url_, options_).then((_response: Response) => {
          return this.processPost(_response);
      });
  }

  protected processPost(response: Response): Promise<CategoryViewModel> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
      if (status === 200) {
          return response.text().then((_responseText) => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = CategoryViewModel.fromJS(resultData200);
          return result200;
          });
      } else if (status !== 200 && status !== 204) {
          return response.text().then((_responseText) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
          });
      }
      return Promise.resolve<CategoryViewModel>(null as any);
  }

  /**
   * @return Success
   */
  getWeatherForecast(): Promise<WeatherForecast[]> {
      let url_ = this.baseUrl + "/WeatherForecast";
      url_ = url_.replace(/[?&]$/, "");

      let options_: RequestInit = {
          method: "GET",
          headers: {
              "Accept": "text/plain"
          }
      };

      return this.http.fetch(url_, options_).then((_response: Response) => {
          return this.processGetWeatherForecast(_response);
      });
  }

  protected processGetWeatherForecast(response: Response): Promise<WeatherForecast[]> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
      if (status === 200) {
          return response.text().then((_responseText) => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          if (Array.isArray(resultData200)) {
              result200 = [] as any;
              for (let item of resultData200)
                  result200!.push(WeatherForecast.fromJS(item));
          }
          else {
              result200 = <any>null;
          }
          return result200;
          });
      } else if (status !== 200 && status !== 204) {
          return response.text().then((_responseText) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
          });
      }
      return Promise.resolve<WeatherForecast[]>(null as any);
  }
}

export class CategoryViewModel implements ICategoryViewModel {
  id?: number;
  name?: string | undefined;
  url?: string | undefined;
  imageUrl?: string | undefined;
  iconUrl?: string | undefined;
  imageData?: string | undefined;

  constructor(data?: ICategoryViewModel) {
      if (data) {
          for (var property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  init(_data?: any) {
      if (_data) {
          this.id = _data["id"];
          this.name = _data["name"];
          this.url = _data["url"];
          this.imageUrl = _data["imageUrl"];
          this.iconUrl = _data["iconUrl"];
          this.imageData = _data["imageData"];
      }
  }

  static fromJS(data: any): CategoryViewModel {
      data = typeof data === 'object' ? data : {};
      let result = new CategoryViewModel();
      result.init(data);
      return result;
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["id"] = this.id;
      data["name"] = this.name;
      data["url"] = this.url;
      data["imageUrl"] = this.imageUrl;
      data["iconUrl"] = this.iconUrl;
      data["imageData"] = this.imageData;
      return data;
  }
}

export interface ICategoryViewModel {
  id?: number;
  name?: string | undefined;
  url?: string | undefined;
  imageUrl?: string | undefined;
  iconUrl?: string | undefined;
  imageData?: string | undefined;
}

export class ProblemDetails implements IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;

  constructor(data?: IProblemDetails) {
      if (data) {
          for (var property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  init(_data?: any) {
      if (_data) {
          this.type = _data["type"];
          this.title = _data["title"];
          this.status = _data["status"];
          this.detail = _data["detail"];
          this.instance = _data["instance"];
      }
  }

  static fromJS(data: any): ProblemDetails {
      data = typeof data === 'object' ? data : {};
      let result = new ProblemDetails();
      result.init(data);
      return result;
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["type"] = this.type;
      data["title"] = this.title;
      data["status"] = this.status;
      data["detail"] = this.detail;
      data["instance"] = this.instance;
      return data;
  }
}

export interface IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
}

export class WeatherForecast implements IWeatherForecast {
  date?: Date;
  temperatureC?: number;
  readonly temperatureF?: number;
  summary?: string | undefined;

  constructor(data?: IWeatherForecast) {
      if (data) {
          for (var property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  init(_data?: any) {
      if (_data) {
          this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
          this.temperatureC = _data["temperatureC"];
          (<any>this).temperatureF = _data["temperatureF"];
          this.summary = _data["summary"];
      }
  }

  static fromJS(data: any): WeatherForecast {
      data = typeof data === 'object' ? data : {};
      let result = new WeatherForecast();
      result.init(data);
      return result;
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["date"] = this.date ? this.date.toISOString() : <any>undefined;
      data["temperatureC"] = this.temperatureC;
      data["temperatureF"] = this.temperatureF;
      data["summary"] = this.summary;
      return data;
  }
}

export interface IWeatherForecast {
  date?: Date;
  temperatureC?: number;
  temperatureF?: number;
  summary?: string | undefined;
}

export interface FileParameter {
  data: any;
  fileName: string;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
      super();

      this.message = message;
      this.status = status;
      this.response = response;
      this.headers = headers;
      this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
      return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
  if (result !== null && result !== undefined)
      throw result;
  else
      throw new ApiException(message, status, response, headers, null);
}
